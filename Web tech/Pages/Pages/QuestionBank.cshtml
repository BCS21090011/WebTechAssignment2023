@page
@model Web_tech.Pages.QuestionBankModel
@{
}

<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
          integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <link rel="stylesheet" href="index.css">
    <link rel="stylesheet" href="~/css/QATablesVer4.css">
    <link rel="stylesheet" href="~/css/QuestionBank.css" asp-append-version="true" />

    <style>


    </style>
</head>

<body>
    <div class="cardquestionbank mb-4" style="margin-left: auto; margin-right: auto;">
        <button onclick="redirectToPage()" class="btn-top-left">New Question</button>
        <h2 class="mt-4 mb-3" style="text-align: left;font-size:40px; font-weight:bold; color:black;">Question Bank</h2>
        <hr />
        <select id="Subject" onchange="RunFilter()">
            <option value="">All</option>
            @foreach (var subject in Model.Subjects)
            {
                <option value="@subject.SubjectName">@subject.SubjectName</option>
            }
        </select>
        <select id="Difficulty"  onchange="RunFilter()">
            <option value="">All</option>
            <option value="Easy">Easy</option>
            <option value="Medium">Medium</option>
            <option value="Hard">Hard</option>
        </select>
        <div class="table-responsive" id="questionbanks" style="margin: auto; height: 60vh; max-height: 60vh; overflow-y: auto; width: 80vw;">
        </div>
        <div style="display: flex; justify-content: center; align-items: center;">
            <button onclick="PrevChunck()">Prev</button>
            <input type="number" id="CurPageNum" value="1" min="1" oninput="CurPageNumFunc()" onchange="CurPageNumFunc()" style="text-align: center;">
            <span id="MaxPageNum"></span>
            <button onclick="NextChunck()">Next</button>
        </div>
    </div>
    <script src="~/js/QATablesVer2.js"></script>
    <script src="~/js/ConvertValues.js"></script>
    <script src="~/js/Filters.js"></script>
    <script src="~/js/AddQstsToJS.js"></script>
    <script>
        function redirectToPage() {
            window.location.href = '/Pages/KeyInPage';
        }
    </script>
    <script>
        var subjects = {};
        // Get all the subjects from database:
        @foreach (var subject in Model.Subjects)
        {
            @:subjects[@subject.SubjectsId] = "@subject.SubjectName";
        }

        var difficulty = {
            1: "Easy",
            2: "Medium",
            3: "Hard"
        };

        var Qsts = [];
        
        // Get all the questions from database:
        @foreach (var qst in Model.Qsts)
        {
            @:AppendQuestionsList(Qsts, @qst.QuestionsId, "@qst.Question", @qst.QuestionMark, "@qst.SubjectsId", "@qst.QuestionDifficulty", "@qst.QuestionImageFileName", "@qst.Answer", "@qst.AnswerImageFileName");
        }

        ConvertAttrToValue(Qsts, "Subject", subjects);
        ConvertAttrToValue(Qsts, "Difficulty", difficulty);
    </script>
    <script>
        function SplitArrayIntoChuncks(array, sizePerChunck) {
            let chuncks = [];
           for (let i = 0; i < array.length; i += sizePerChunck) {
                const chunck = array.slice(i, i + sizePerChunck);
                chuncks.push(chunck);
            }
            return chuncks;
        }

        function SetPageNum() {
            if (QstsChuncks.length > 0) {
                curPageNum.max = QstsChuncks.length;
                maxPageNum.textContent = '/' + QstsChuncks.length;
            }
            else {
                curPageNum.max = 1;
                maxPageNum.textContent = '/' + 1;
            }
        }

        function CurPageNumFunc() {
            const page = parseInt(curPageNum.value);
            if (!isNaN(page)) {
                GotoChunckIndex(page - 1);
            }
        }

        function NextChunck() {
            if (curChunckIndex < QstsChuncks.length - 1) {
                GotoChunckIndex(curChunckIndex + 1);
            }
            else {
                GotoChunckIndex(0);
            }
        }

        function PrevChunck() {
            if (curChunckIndex > 0) {
                GotoChunckIndex(curChunckIndex - 1);
            }
            else {
                GotoChunckIndex(QstsChuncks.length - 1);
            }
        }

        function GotoChunckIndex(index) {
            if (QstsChuncks.length > 0) {
                if (index >= 0 && index < QstsChuncks.length) {
                    curPageNum.value = index + 1;
                    curChunckIndex = index;
                    CreateQATable(QstsChuncks[index], "questionbanks");
                }
                else {
                    console.log("Chunck index (" + index + ") is out of range (0, " + QstsChuncks.length + ")");
                    curPageNum.value = curChunckIndex + 1;
                }
            }
            else {
                curPageNum.value = 1;
                curChunckIndex = 0;

                const table = document.getElementById("questionbanks");
                table.innerHTML = "";

                // What should be shown if there are no questions:
                const h1 = document.createElement("h1");
                h1.textContent = "No Question found!";
                h1.style.textAlign = "center";
                h1.style.justifyContent = "center";
                h1.style.alignItems = "center";

                table.appendChild(h1);
            }
        }

        function RunFilter() {
            var filteredQsts = Qsts
            const subject = document.getElementById("Subject");
            if (subject.value) {
                filteredQsts = FilterQstsByAttr(filteredQsts, "Subject", subject.value);
            }
            const difficulty = document.getElementById("Difficulty");
            if (difficulty.value) {
                filteredQsts = FilterQstsByAttr(filteredQsts, "Difficulty", difficulty.value);
            }
            console.log(filteredQsts);
            QstsChuncks = SplitArrayIntoChuncks(filteredQsts, chunkSize);
            SetPageNum();

            GotoChunckIndex(0);
        }

        var chunkSize = 10;
        var QstsChuncks = SplitArrayIntoChuncks(Qsts, chunkSize);
        var curChunckIndex = 0;

        const curPageNum = document.getElementById("CurPageNum");
        const maxPageNum = document.getElementById("MaxPageNum");
        SetPageNum();
        GotoChunckIndex(0);
        // These below will just display all instead of chunk by chunck.
        // CreateQATable(Qsts, "questionbanks");
    </script>
</body>
</html>