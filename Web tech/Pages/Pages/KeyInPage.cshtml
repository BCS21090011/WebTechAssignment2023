@page "/pages/keyinpage"
@model Web_tech.Pages.KeyInPageModel
@using Microsoft.AspNetCore.Authorization
@{
    if (User.IsInRole("Admin"))
    {
        // Content visible to SuperAdmin only

        <html lang="en">

        <head>
            <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

            <!-- Load Quill JavaScript -->
            <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

            <style>
                form {
                    position: relative;
                    padding: 20px;
                    flex-wrap: wrap;
                    justify-content: space-between;
                }

                label {
                    display: block;
                    width: 150px;
                    margin: 10px 0;
                }

                input[type="text"],
                input[type="number"],
                select {
                    padding: 10px;
                    margin: 10px 0;
                    border: 1px solid #ccc;
                    border-radius: 4px;
                    width: 100%;
                    box-sizing: border-box;
                }

                input[type="submit"] {
                }

                    input[type="submit"]:hover {
                        background-color: #45a049;
                    }

                #question-editor {
                    height: 200px;
                    width: 100%;
                    background-color: white;
                }

                #answer-editor {
                    height: 200px;
                    width: 100%;
                    background-color: white;
                }

                .form-wrapper {
                    border: 1px solid #ccc;
                    border-radius: 10px;
                    padding: 20px;
                    width: 80%;
                    margin: auto;
                    margin-top: 50px;
                    position: relative;
                    background: rgba(255, 255, 255, 0.72);
                    border-radius: 16px;
                    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
                    backdrop-filter: blur(7.8px);
                    -webkit-backdrop-filter: blur(7.8px);
                }

                    .form-wrapper input[type="submit"] {
                        background-color: black;
                        color: white;
                        padding: 12px 20px;
                        border: none;
                        position: absolute;
                        border-radius: 15px;
                        cursor: pointer;
                        bottom: 15px;
                        right: 15px;
                        font-weight: bold;
                        transition: all 0.3s ease-in-out;
                    }

                        .form-wrapper input[type="submit"]:hover {
                            color: wheat;
                            font-size: 18px;
                        }



                .Container {
                    margin-top: calc(10vh + 2vw);
                    margin-bottom: calc(10vh + 2vw);
                }


      

                .delete-button {
                    display: inline-block;
                    padding: 8px 8px;
                    font-size: 15px;
                    background-color: black;
                    color: #fff;
                    text-decoration: none;
                    border: none;
                    border-radius: 4px;
                    font-size: 15px;
                    cursor: pointer;
                    margin-left:5vw;
                }

                    .delete-button:hover {
                        background-color: black;
                        cursor: pointer;
                        transform: translateY(-2px);
                        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
                    }

            </style>
        </head>


        <body>
            <div class="Container">
                <div class="form-wrapper">
                    <form method="post" enctype="multipart/form-data">
                        <label for="difficulty">Difficulty level:</label>
                        <select id="difficulty" asp-for="Questions.QuestionDifficulty" class="form-control">
                            <option value="1">Easy</option>
                            <option value="2">Medium</option>
                            <option value="3">Hard</option>
                        </select>

                        <label for="subject">Subject:</label>
                        <select id="subject" asp-for="Questions.SubjectsId" class="form-control">
                            @foreach (var subject in Model.Subjects)
                            {
                                <option value="@subject.SubjectsId">@subject.SubjectName</option>
                            }
                        </select>

                        <label for="question">Question:</label>
                        <div id="question-editor" class="form-control"></div>
                        <input type="hidden" id="question" name="Questions.Question" />

                        <label for="answer">Answer:</label>
                        <div id="answer-editor" class="form-control"></div>
                        <input type="hidden" id="answer" name="Questions.Answer" />

                        <label for="marks">Marks:</label>
                        <input type="number" id="marks" name="Questions.QuestionMark" min="0" asp-for="Questions.QuestionMark" class="form-control">

                        <label for="question_image">Upload image:</label>
                        <input type="file" id="question_image" name="questionImage" onchange="previewImage(event, 'question-preview')">
                        <button id="question-preview-delete" type="button" class="delete-button" onclick="deleteImage('question-preview')">Delete</button>
                        <img id="question-preview" src="#" alt="Preview Image" style="display: none; max-width: 300px; max-height: 300px;">
                        

                        <label for="answer_image">Upload image:</label>
                        <input type="file" id="answer_image" name="answerImage" onchange="previewImage(event, 'answer-preview')">
                        <button id="answer-preview-delete" type="button" class="delete-button" onclick="deleteImage('answer-preview')">Delete</button>
                        <img id="answer-preview" src="#" alt="Preview Image" style="display: none; max-width: 300px; max-height: 300px;">
                        

                        <input type="submit" value="Submit" class="btn btn-primary form-control">
                    </form>
                </div>
            </div>
            <div class="validation-summary-errors">
                <ul>
                    @foreach (var modelStateEntry in ViewData.ModelState.Values)
                    {
                        foreach (var error in modelStateEntry.Errors)
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    }
                </ul>
            </div>

        </body>
        <script>
            const subjectSelect = document.getElementById('subject');
            const otherSubjectInput = document.getElementById('other-subject');

            subjectSelect.addEventListener('change', () => {
                if (subjectSelect.value === 'other') {
                    otherSubjectInput.style.display = 'inline';
                } else {
                    otherSubjectInput.style.display = 'none';
                }
            });
        </script>
        <script>
            var questionEditor = new Quill('#question-editor', {
                modules: {
                    toolbar: [
                        [{ 'header': [1, 2, 3, false] }],
                        ['bold', 'italic', 'underline'],
                        ['code', 'strike'],
                        ['image', 'link'],
                        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                        ['clean']
                    ]
                },
                placeholder: 'Enter your question here',
                theme: 'snow'
            });

            questionEditor.on('text-change', function () {
                var questionContent = questionEditor.root.innerHTML;
                var questionContent = questionContent.replace(/<p><\/p>/g, '');
                questionContent = questionContent.replace(/<p>/g, ''); // Remove opening <p> tags
                questionContent = questionContent.replace(/<\/p>/g, ''); // Remove closing </p> tags

                document.getElementById('question').value = questionContent.trim();
            });

            var answerEditor = new Quill('#answer-editor', {
                modules: {
                    toolbar: [
                        [{ 'header': [1, 2, 3, false] }],
                        ['bold', 'italic', 'underline'],
                        ['code', 'strike'],
                        [{ 'indent': '-1' }, { 'indent': '+1' }],
                        [{ 'align': [] }],
                        [{ 'direction': 'rtl' }],
                        [{ 'code-block': 'language' }],
                        ['image', 'link'],
                        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                        ['clean']
                    ]
                },
                placeholder: 'Enter your answer here',
                theme: 'snow'
            });

            answerEditor.on('text-change', function () {
                var answerContent = answerEditor.root.innerHTML;
                var asnwerContent = answerContent.replace(/<p><\/p>/g, ''); // Remove empty <p> tags
                asnwerContent = asnwerContent.replace(/<p>/g, ''); // Remove opening <p> tags
                asnwerContent = asnwerContent.replace(/<\/p>/g, ''); // Remove closing </p> tags
                document.getElementById('answer').value = asnwerContent.trim();
            });


            function previewImage(event, previewId) {
                var input = event.target;
                var preview = document.getElementById(previewId);

                if (input.files && input.files[0]) {
                    console.log("Image should be displayed!");
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        console.log(e);
                        preview.src = e.target.result;
                        preview.style.display = "block";
                    };

                    reader.readAsDataURL(input.files[0]);
                } else {
                    console.log("No image should be displayed!");
                    preview.src = "#";
                    preview.style.display = "none";
                }
            }

            function deleteImage(previewId) {
                var preview = document.getElementById(previewId);
                preview.src = '#';
                preview.style.display = 'none';

                var deleteButton = document.querySelector(`#${previewId}-delete`);
                deleteButton.style.display = 'none';

                var fileInput = document.querySelector(`#${previewId.split('-')[0]}_image`);
                fileInput.value = '';
                var originalDeleteButton = document.getElementById(previewId.split('-')[0] + '-preview-delete');
                originalDeleteButton.style.display = 'inline-block';
            }
        </script>
        </html>
    }
}